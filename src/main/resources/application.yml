#server configuration:
server:
  port: 8081
  compression:
    enabled: true
  tomcat:
    uri-encoding: UTF-8
  error:
    include-message: never

#spring configuration:
spring:
  webflux:
    base-path: /api-core-ejercito-statistics-microservice/v1
  application:
    name: api-core-ejercito-statistics-microservice
    version: 1.0.0
  messages:
    encoding: UTF-8
  version: v2.7.1
  main:
    banner-mode: log
    lazy-initialization: false
  mvc:
    converters:
      preferred-json-mapper: jsonb
  servlet:
    multipart:
      enabled: true
      file-size-threshold: 2KB
      max-file-size: 200MB
      max-request-size: 215MB

  jpa:
    open-in-view: false
    show-sql: false
    database: postgresql
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        temp:
          use_jdbc_metadata_defaults: false
        show_sql: true
  datasource:
    hikari:
      connection-init-sql: SELECT 1
      connection-test-query: SELECT 1
      allow-pool-suspension: false
      auto-commit: true                   # This property controls the default auto-commit behavior of connections returned from the pool. It is a boolean value, default: true
      connection-timeout: 3000            # The maximum length of time (milliseconds) to wait for the connection pool to allocate a connection, and a SQLException will occur if the connection is not available for more than this length. The default:30second
      idle-timeout: 600000                # The maximum duration of connection timeout (milliseconds), timeout will be released (retired), default: 10Minutes
      leak-detection-threshold: 45000     # This property controls the amount of time that a connection can be out of the pool before a message is logged indicating a possible connection leak. A value of 0 means leak detection is disabled, minimum accepted value is 2000 (ms). ( ps: it's rarely needed option, use only for debugging ), default: 0
      max-lifetime: 1800000               # This property controls the maximum lifetime of a connection in the pool. A value of 0 indicates no maximum lifetime (infinite lifetime), default: 1800000
      minimum-idle: 10                    # This property controls the minimum number of idle connections that HikariCP tries to maintain in the pool, default: 10
      maximum-pool-size: 20               # This property controls the maximum size that the pool is allowed to reach, including both idle and in-use connections. Basically this value will determine the maximum number of actual connections to the database backend, default: 10
      validation-timeout: 5000            # This property controls the maximum amount of time that a connection will be tested for aliveness. This value must be less than the :connection-timeout. The lowest accepted validation timeout is 1000ms (1 second).
#logging configuration
logging:
  level:
    root: ${LOGGING_CONFIGURATION_APP:debug}

#developer configuration:
developer:
  nickname: cbacilio

#microservice configuration:
microservice:
  key: 524be2fc-9995-4ab0-98c6-8d2e16502522
  datasource:
    name: microservice.datasource.ep.solutions
    encryption-enable: true
    encryption-key: true
  configuration:
    domain: http://localhost:8080
    type: microservice.configuration.type.json.file
  error-handler: ERROR_HANDLER_LINK_NOT_DEFINED
  messages:
    path: "/json/messages.json"
    index: "01"